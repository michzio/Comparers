# Makefile for UNIX 

# the compiler: gcc for C program, define as g++ for C++ 
CC = gcc 

# the static library archiver 
AR = ar rcs 

# compiler flags: 
# -g enable debugging
# -Wall turn on all warnings 
# -D__USE_FIXED_PROTOTYPES__ force the compiler to use the correct headers 
# -ansi donâ€™t use GNU extensions, stick to ANSI 
# -std=c99 use newer version 
CFLAGS=-g -Wall -D__USE_FIXED_PROTOTYPES__ -std=c99

# the build target executable:
TARGET = comparers 
LIBRARY = libcomparers.a  
SHARED_LIBRARY = libcomparers.so

# on macOS build .dylib shared library 
UNAME_S := $(shell uname -s)
ifeq ($(UNAME_S),Darwin)
        DYNAMIC_LIBRARY= libcomparers.dylib
else 
	DYNAMIC_LIBRARY= 
endif

# outputs directories
OUTPUTS_DIR = outputs/debug
OUTPUTS_LIB_DIR = $(OUTPUTS_DIR)/lib
OUTPUTS_BIN_DIR = $(OUTPUTS_DIR)/bin

all: directories libraries $(TARGET)

# make outputs directories
directories:
	@mkdir -p $(OUTPUTS_DIR)
	@mkdir -p $(OUTPUTS_LIB_DIR)
	@mkdir -p $(OUTPUTS_BIN_DIR)

libraries: $(LIBRARY) $(SHARED_LIBRARY) $(DYNAMIC_LIBRARY)

$(TARGET): $(LIBRARY) 
	$(CC) $(CFLAGS) -o $(OUTPUTS_BIN_DIR)/$(TARGET) src/main.c $(OUTPUTS_LIB_DIR)/$(LIBRARY)

$(SHARED_LIBRARY): comparer.o
	$(CC) $(CFLAGS) -shared -o $(OUTPUTS_LIB_DIR)/$(SHARED_LIBRARY) $(OUTPUTS_DIR)/comparer.o

$(DYNAMIC_LIBRARY): comparer.o
	$(CC) $(CFLAGS) -dynamiclib -o $(OUTPUTS_LIB_DIR)/$(DYNAMIC_LIBRARY) $(OUTPUTS_DIR)/comparer.o

$(LIBRARY): comparer.o 
	$(AR) $(OUTPUTS_LIB_DIR)/$(LIBRARY) $(OUTPUTS_DIR)/comparer.o

comparer.o: src/comparer.c include/comparer.h
	$(CC) $(CFLAGS) -c src/comparer.c -o $(OUTPUTS_DIR)/comparer.o

clean: 
	$(RM) -rf $(OUTPUTS_DIR)
